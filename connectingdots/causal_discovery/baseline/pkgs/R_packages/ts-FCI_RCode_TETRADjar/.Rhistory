}
else
{
#-1: ind., +1 dep.
indtest_at_end[d] <- -1
}
parlen[d] <- length(S)
C[S,variable[d]] <- rep(1,length(S))
}
else
{
#-1: ind., +1 dep.
indtest_at_end[d] <- -1
}
}
if(max(indtest_at_end)<0)
{
for(i in 1:p[2])
{
C[i,i] <- 0
}
if(output)
{
print(paste("all correct..."))
}
}
else
{
if(output)
{
print(paste("final ind. test failed. No solution."))
}
C <- matrix(NA,p[2],p[2])
}
}
if(output)
{
show("final summary time graph:")
show(C)
}
return(C)
}
indtestts_crosscov
fit_and_test_independence(a1,a2,a2)
fit_and_test_independence(a1,a2,a2,4)
fit_and_test_independence(a1,a2,a2,4)
rep(0,2)
rep(0,3-1)
e = rep(0,3-1)
e[1]
e[3]
e[3]=5
e
sign(1)
sign(2)
sign(-2)
ccf
ccf(1)
ccf(1,2)
n <- 1000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
ccf(x,y)
c <- ccf(x,y)
c
c
c$acf
c <- ccf(x,y,w)
c <- ccf(cbing(x,y,w))
ccf(cbind(x,y,w))
c <- ccf(cbind(x,y))
c$acf
c <- ccf(cbind(x,y))
c <- ccf(cbind(x,y))
c <- ccf(x,y)
c
c$type
c$n.used
c$lag
c$series
c
c$snames
x*y
dim(x*y)
dim(x*y)
length(x*y)
length(x)
length(x*y)
z <- x*y
a <- acf(z)
a
a$acf
c$acf
a$acf
c$acf
a$acf
c$acf
a <- acf(z, lag.max = length(x)-1)
a$acf
c$acf
c <- ccf(x,y)
a <- acf(z, lag.max = length(x)-1)
a <- acf(z)
c <- ccf(x,y)
a$acf
a <- acf(z)
c$series
c$lag
a <- acf(ts.union(x,y))
x
y
ts.union(x,y)
ts.union(x,y)
ts.union(x,y)
x
cbind(x,y)
a <- acf(cbind(x,y))
a <- acf(cbind(x,y))
c <- ccf(x,y)
a <- acf(cbind(x,y))
a$acf
c <- ccf(x,y)
a <- acf(cbind(x,y))
a$acf
c$acf
a$acf
c <- ccf(x,y)
c$acf
a$acf
a$acf
a <- acf(cbind(x,y))
a$acf["x"]
a$acf
c$acf
a$lag
a$acf
c$acf
c$acf[,,2]
c$acf[2]
c$acf[,2]
c$acf[2]
c$acf
a$acf[,2]
a$acf[,,2]
a$acf[,,1]
a$acf[,,1,2]
a$acf[,,1][,2]
a$acf[,,1][,2]
a$acf[,,2][,1]
rev(a$acf[,,1][,2])
c1 <- rev(a$acf[,,1][,2])
c2 <- a$acf[,,2][,1]
rbind(c1,c2)
cbind(c1,c2)
c(c1,c2)
c$acf
length(c(c1,c2))
c$acf
length(c(c1,c2))
c1
c2
c1 <- rev(a$acf[,,1][,2])
a$acf[,,1][,2]
a$acf[,,2][,1]
a$acf
c1
c2
c2[2:]
c2[-1]
c(c1,c2[-1])
c$acf
length(c(c1,c2[-1]))
10*log(10)(1000/2)
log(10)
10*log(10)*(1000/2)
10*log(10)
10*log(10)*(2/1000)
10*log(10)
10*log(10*(2/1000))
10*log(10*(2/1000))
10*log(10*(1000/2))
10*log(10*(1000/2))
10*log(10)
10*log(10)*(1000/2)
10*log(10*(1000/2))
10*log(10*(1000/2))/2
10*log((1000/2))
10*log(1000/2)
1000/2
log10(1000/2)
10*log10(1000/2)
10*log10(1000/2)
10*log10(1000/2)
round(10*log10(1000/2))
floor(10*log10(1000/2))
floor(10*log10(1000/2))
c$lag
round(10*log10(1000/2))
c$acf
c <- ccf(x,cbind(y,w))
c <- ccf(x,w)
c
c <- ccf(x,y)
getAnywhere(C_acf)
round(10*log10(1000/2))
c$acf
x.mean()
mean(x)
mean(y)
var(x)
var(y)
n <- 10000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
n <- 100000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
mean(y)
var(x)
var(y)
c <- ccf(x,y)
c$acf
n <- 1000000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
mean(x)
mean(y)
var(y)
var(x)
c <- ccf(x,y)
round(10*log10(1000000/2))
c <- ccf(x,y)
c$acf
n <- 1000000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
c <- ccf(x,y)
y
c$acf
c <- ccf(x,y)
c$acf
a <- acf(cbind(x,y))
a
a <- acf(cbind(x,y))
a
1 %*% 1
1.0 %*% 1.2
1.0 * 1.2
ceiling(3.2)
eps = y
alpha = 0.05
max_lag = 10
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
T
sigma <- matrix(0,2*max_lag,2*max_lag)
sigma
max_lag = 5
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
T
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
R
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
z
maxz <- apply(abs(z),1,max)
maxz
z
maxz
abs(z)
maxz
length(maxz)
T
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
quan
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
quan
sum(maxzorder>T)
sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
# estimate cov of x-cor.
# Theorem 11.2.3 in brockwell and davis: "bartletts formula"
# H_0: rho_{12} == 0 => non-zero summands only for j = k - h
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
maxz <- apply(abs(z),1,max)
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
n <- 10000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.8*x[i-1]+0.5*epsy[i]
w[i] <- -0.6*w[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
x
eps = y
alpha = 0.05
max_lag = 5
corr1 <- ccf(x,eps,lag.max=max_lag,type = "correlation",plot = FALSE)
T <- max(abs(corr1$acf))
sigma <- matrix(0,2*max_lag,2*max_lag)
# estimate cov of x-cor.
# Theorem 11.2.3 in brockwell and davis: "bartletts formula"
# H_0: rho_{12} == 0 => non-zero summands only for j = k - h
acr <- acf(x,lag.max=2*max_lag,type = "correlation",plot=FALSE)
for(i in 1:(2*max_lag))
{
for(j in 1:i)
{
sigma[i,j]=acr$acf[1+(i-j)]
sigma[j,i]=acr$acf[1+(i-j)]
}
}
sigma <- sigma/length(x)
R <- chol(sigma)
num_simulations<-20000
z <- matrix(rnorm(2*max_lag*num_simulations),num_simulations,2*max_lag)
z <- z%*%R
maxz <- apply(abs(z),1,max)
maxzorder <- sort(maxz)
quan <- maxzorder[ceiling(num_simulations-alpha*num_simulations)]
pval <- sum(maxzorder>T)/num_simulations
resu <- list(statistic = T, crit.value = quan, p.value = pval)
resu
max(c(1,3,4))
max(c(1,3,4))
max(c(1,3,4))
max(c(1,3,4),1)
max(c(1,3,4),2)
max(c(1,3,4),10)
start_time <- Sys.time()
set.seed(1)
n <- 1000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.5*epsy[i] #0.8*x[i-1]+
w[i] <- -0.6*w[i-1]+0.8*y[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
data <- cbind(x,y,w)
d <- realData_tsfci(data=data, sig=0.01, nrep=4, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=TRUE)
setwd('/home/kassaad/Documents/Codes/R - codes/ts-FCI/RCode_TETRADjar_tsFCI/RCode_TETRADjar')
start_up <- function() {
source('dconnected.R')
source('genData.R')
source('main_tetrad_fci.R')
source('plot_timeseries.R')
source('Plotting_Commands_Barplots.R')
source('plot_ts_pag.R')
source('realData_tsfci.R')
source('scores.R')
source('Simulation_Commands.R')
source('Simulations_data_cont.R')
source('Simulations_data_disc.R')
source('Simulations_graph.R')
source('Tetrad_R_interact.R')
source('ts_functions.R')
start_time <- Sys.time()
set.seed(1)
n <- 1000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.5*epsy[i] #0.8*x[i-1]+
w[i] <- -0.6*w[i-1]+0.8*y[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
data <- cbind(x,y,w)
d <- realData_tsfci(data=data, sig=0.01, nrep=4, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=TRUE)
)
set.seed(1)
n <- 1000
w <- rep(0,n)
x <- rep(0,n)
y <- rep(0,n)
epsw <- rnorm(n)^3
epsx <- rnorm(n)^3
epsy <- rnorm(n)^3
for(i in 3:n)
{
x[i] <- 0.3*x[i-1]+0.5*epsx[i]
y[i] <- 0.8*y[i-1]+0.5*epsy[i] #0.8*x[i-1]+
w[i] <- -0.6*w[i-1]+0.8*y[i-1]+0.8*x[i-2]+0.5*epsw[i]
}
data <- cbind(x,y,w)
d <- realData_tsfci(data=data, sig=0.01, nrep=4, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=TRUE)
d <- realData_tsfci(data=data, sig=0.01, nrep=4, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=TRUE)
start_up <- function() {
source('dconnected.R')
source('genData.R')
source('main_tetrad_fci.R')
source('plot_timeseries.R')
source('Plotting_Commands_Barplots.R')
source('plot_ts_pag.R')
source('realData_tsfci.R')
source('scores.R')
source('Simulation_Commands.R')
source('Simulations_data_cont.R')
source('Simulations_data_disc.R')
source('Simulations_graph.R')
source('Tetrad_R_interact.R')
source('ts_functions.R')
}
start_up()
d <- realData_tsfci(data=data, sig=0.01, nrep=4, inclIE=FALSE, alg="tscfci", datatype="continuous", makeplot=TRUE)
